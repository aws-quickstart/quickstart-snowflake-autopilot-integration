AWSTemplateFormatVersion: "2010-09-09"
Description: Snowflake autopilot integration (qs-1sde6uo9p)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AWS configuration
        Parameters:
          - S3BucketName
          - apiGatewayName
          - apiGatewayStageName
          - kmsKeyArn
      - Label: 
          default: Snowflake configuration
        Parameters:
          - snowflakeDatabaseName
          - snowflakeSchemaName
          - snowflakeResourceSuffix
          - snowflakeRole
          - snowflakeAccount
          - snowflakeUser
          - snowflakePassword
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      apiGatewayName:
        default: API Gateway name
      apiGatewayStageName:
        default: API Gateway stage name
      kmsKeyArn:
        default: KMS key ARN
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      S3BucketName:
        default: S3 bucket name
      snowflakeDatabaseName:
        default: Snowflake database name
      snowflakeSchemaName:
        default: Snowflake schema name
      snowflakeResourceSuffix:
        default: Snowflake resource suffix
      snowflakeRole:
        default: Snowflake role
      snowflakeAccount:
        default: Snowflake account ID
      snowflakeUser:
        default: Snowflake username
      snowflakePassword:
        default: Snowflake password
Parameters:
  S3BucketName:
    Type: String
    Description: "Name of the S3 bucket to be created, must be unique"
    MinLength: 1
  snowflakeAccount:
    Type: String
    Description: "Snowflake account"
    MinLength: 1
  snowflakeUser:
    Type: String
    Description: "Snowflake username"
    MinLength: 1
  snowflakePassword:
    Type: String
    NoEcho: true
    Description: "Snowflake password"
    MinLength: 1
  kmsKeyArn:
    Type: String
    AllowedPattern: "^(arn:aws[a-z-]*:kms:[a-z0-9-]*:[0-9]{12}:key\\/.+)?$"
    Default: ""
    Description: "(Optional) ARN of the AWS Key Management Service key that Amazon SageMaker uses to encrypt job outputs. The KmsKeyId is applied to all outputs."
# Future consideration
#  vpcSecurityGroupIds:
#    Type: "String"
#    AllowedPattern: "^([-0-9a-zA-Z]+(,\\s*[-0-9a-zA-Z]+)*)?$"
#    Default: ""
#    Description: "(Optional) Comma delimited list of security group ids for VPC configuration"
#  vpcSubnetIds:
#    Type: "String"
#    AllowedPattern: "^([-0-9a-zA-Z]+(,\\s*[-0-9a-zA-Z]+)*)?$"
#    Default: ""
#    Description: "(Optional) Comma delimited list of subnet ids for VPC configuration"
  snowflakeRole:
    Type: String
    Description: "Snowflake Role with permissions to create Storage Integrations, API Integrations, and Functions"
    Default: "ACCOUNTADMIN"
    MinLength: 1
  snowflakeDatabaseName:
    Type: String
    Description: "Snowflake Database in which external functions will be created"
    MinLength: 1
  snowflakeSchemaName:
    Type: String
    Description: "Snowflake Database Schema in which external functions will be created"
    MinLength: 1
  apiGatewayName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9]+[-a-zA-Z0-9-]+[-a-zA-Z0-9]+$"
    Default: "snowflake-autopilot-api"
    Description: "API Gateway name"
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[-a-zA-Z0-9]+$"
    Default: "main"
    Description: "API deployment stage"
    MinLength: 1
  snowflakeResourceSuffix:
    Type: String
    Description: "(Optional) Suffix for resources created in Snowflake. This suffix will be added to all function names created in the database schema."
    Default: ""
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description: Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: 'AWS Region where the Quick Start S3 bucket (QSS3BucketName) is 
    hosted. Keep the default Region unless you are customizing the template. 
    Changing this Region updates code references to point to a new Quick Start location. 
    When using your own bucket, specify the Region. 
    See https://aws-quickstart.github.io/option1.html.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/). The prefix should
      end with a forward slash (/).
    Default: quickstart-snowflake-autopilot-integration/
    Description: S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with 
      a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
    Type: String
Mappings:
  Package:
    Attributes:
      Identifier: "'SagemakerProxy/0.1'"
    Locations:
      CodeBucket: aws-quickstart
      PathToLayerCode: quickstart-snowflake-autopilot-integration/functions/packages/snowflake-connector-python-0.1.zip
      PathToLambdaCode: quickstart-snowflake-autopilot-integration/functions/packages/create-resources-0.1.zip
Conditions:
  KMSKeyArnProvided: !Not
    - !Equals
      - !Ref kmsKeyArn
      - ""
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Resources:
  snowflakeSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AWSQuickStart/${AWS::StackName}/snowflakeSecret'
      Description: Snowflake secret
      SecretString: !Sub '{ "username" : "${snowflakeUser}", "password" : "${snowflakePassword}", "accountid" : "${snowflakeAccount}" }'
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref S3BucketName
  SnowflakeAutoMLExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: IAM Role used to execute the AutoML jobs from Snowflake
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSageMakerFullAccess'
      Policies:
        - PolicyName: s3-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                  - 's3:ListBucket'
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt S3Bucket.Arn
                      - '/*'
        - PolicyName: kms-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:CreateGrant'
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey*"
                  - "kms:ReEncrypt*"
                Resource:
                  - !Join
                    - ":"
                    - - "arn"
                      - !Ref AWS::Partition
                      - "kms"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "alias/aws/secretsmanager"
                  - !If
                    - KMSKeyArnProvided
                    - !Ref kmsKeyArn
                    - !Ref AWS::NoValue
        - PolicyName: secrets-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref snowflakeSecret
  SnowflakeAPIGatewayExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: IAM Role used to call SageMaker from API Gateway for SnowFlake
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'sagemaker:CreateAutoMLJob'
                  - 'sagemaker:DescribeAutoMLJob'
                  - 'sagemaker:CreateEndpointConfig'
                  - 'sagemaker:DescribeEndpointConfig'
                  - 'sagemaker:DeleteEndpointConfig'
                  - 'sagemaker:CreateEndpoint'
                  - 'sagemaker:DescribeEndpoint'
                  - 'sagemaker:InvokeEndpoint'
                  - 'sagemaker:DeleteEndpoint'
                Resource: '*'
        - PolicyName: passRoleToExecute
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: !GetAtt "SnowflakeAutoMLExecutionRole.Arn"
        - PolicyName: kms-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:CreateGrant'
                  - "kms:Decrypt"
                  - "kms:DescribeKey"
                  - "kms:Encrypt"
                  - "kms:GenerateDataKey*"
                  - "kms:ReEncrypt*"
                Resource:
                  - !Join
                    - ":"
                    - - "arn"
                      - !Ref AWS::Partition
                      - "kms"
                      - !Ref AWS::Region
                      - !Ref AWS::AccountId
                      - "alias/aws/secretsmanager"
                  - !If
                    - KMSKeyArnProvided
                    - !Ref kmsKeyArn
                    - !Ref AWS::NoValue
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM Role used to copy Snowflake libraries form the shared repository
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - PolicyName: s3-dest-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource:
                  - !Join
                    - ''
                    - - !GetAtt S3Bucket.Arn
                      - '/*'
        - PolicyName: s3-src-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: '*'
  CreateSnowflakeResourcesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: IAM Role used to create Snowflake resources from the CloudFormation template
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - PolicyName: secrets-permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                Resource: !Ref snowflakeSecret
        - PolicyName: update-iam-role
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:UpdateAssumeRolePolicy'
                Resource:
                  - !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
                  - !GetAtt SnowflakeAutoMLExecutionRole.Arn
  SnowflakeApiGateway:
    Type: "AWS::ApiGateway::RestApi"
    DependsOn: SnowflakeAPIGatewayExecutionRole
    Properties:
      Name: !Ref apiGatewayName
      Description: "Snowflake external functions Gateway"
      Policy: !Sub
        - '{ "Version": "2012-10-17", "Statement": [ {  "Effect": "Allow", "Principal": { "AWS": "arn:${AWS::Partition}:sts::${AWS::AccountId}:assumed-role/${SnowflakeAPIGatewayExecutionRole}/snowflake" }, "Action": "execute-api:Invoke", "Resource": "${resourceArn}" }  ] }'
        - resourceArn: !Join [ "", [ "execute-api:/", "*" ] ]
      EndpointConfiguration:
        Types:
          - REGIONAL
  SnowflakeApiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "CreateModelPostMethod"
      - "PredictOutcomePostMethod"
      - "DeleteEndpointPostMethod"
      - "CreateEndpointPostMethod"
      - "DescribeModelPostMethod"
      - "DescribeEndpointPostMethod"
      - "CreateEndpointConfigPostMethod"
      - "DescribeEndpointConfigPostMethod"
      - "DeleteEndpointConfigPostMethod"
    Properties:
      RestApiId: !Ref "SnowflakeApiGateway"
      StageName: !Ref apiGatewayStageName
  RootApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !GetAtt
            - SnowflakeApiGateway
            - RootResourceId
      PathPart: sagemaker
  CreateModelApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: createmodel
  PredictOutcomeApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: predictoutcome
  PredictOutcomeEndpointNameApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref PredictOutcomeApiResource
      PathPart: "{endpointName}"
  DeleteEndpointApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: deleteendpoint
  DeleteEndpointConfigApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: deleteendpointconfig   
  CreateEndpointApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: createendpoint
  CreateEndpointConfigApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: createendpointconfig    
  DescribeModelApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: describemodel
  DescribeEndpointApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: describeendpoint
  DescribeEndpointConfigApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref SnowflakeApiGateway
      ParentId: !Ref RootApiResource
      PathPart: describeendpointconfig    
  CreateModelPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/CreateAutoMLJob"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.CreateAutoMLJob'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'        
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "CreateModelApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  PredictOutcomePostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      RequestParameters:
        method.request.path.endpointName: true
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        RequestParameters:
          integration.request.path.endpointName: method.request.path.endpointName
          integration.request.header.Content-Type: "'text/csv'"
          integration.request.header.Accept: "'application/json'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        PassthroughBehavior: WHEN_NO_MATCH
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :runtime.sagemaker:path/endpoints/{endpointName}
              - /invocations
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'
          - StatusCode: 400
            SelectionPattern: '4..'
          - StatusCode: 500
            SelectionPattern: '5..'
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "PredictOutcomeEndpointNameApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  DeleteEndpointPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/DeleteEndpoint"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.DeleteEndpoint'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'            
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "DeleteEndpointApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  CreateEndpointPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/CreateEndpoint"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.CreateEndpoint'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'
          - StatusCode: 400
            SelectionPattern: '4..'
          - StatusCode: 500
            SelectionPattern: '5..'
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "CreateEndpointApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  DescribeModelPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/DescribeAutoMLJob"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.DescribeAutoMLJob'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'            
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "DescribeModelApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  DescribeEndpointPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/DescribeEndpoint"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.DescribeEndpoint'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'            
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "DescribeEndpointApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  DescribeEndpointConfigPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/DescribeEndpointConfig"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.DescribeEndpointConfig'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'            
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "DescribeEndpointConfigApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  CreateEndpointConfigPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/CreateEndpointConfig"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.CreateEndpointConfig'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'
          - StatusCode: 400
            SelectionPattern: '4..'
          - StatusCode: 500
            SelectionPattern: '5..'
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "CreateEndpointConfigApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"
  DeleteEndpointConfigPostMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "AWS_IAM"
      HttpMethod: "POST"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS"
        Credentials: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
        Uri:
          Fn::Join:
            - ":"
            - - "arn"
              - Ref: AWS::Partition
              - "apigateway"
              - Ref: AWS::Region
              - "sagemaker:action/DeleteEndpointConfig"
        RequestParameters:
          integration.request.header.X-Amz-Target: "'SageMaker.DeleteEndpointConfig'"
          integration.request.header.Content-Type: "'application/x-amz-json-1.1'"
          integration.request.header.X-Proxy-Agent: "'SagemakerProxy/0.1'"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: '2..'            
          - StatusCode: 400
            SelectionPattern: '4..'            
          - StatusCode: 500
            SelectionPattern: '5..'            
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400
        - StatusCode: 500
      ResourceId: !Ref "DeleteEndpointConfigApiResource"
      RestApiId: !Ref "SnowflakeApiGateway"      
  CopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          # Inspired by https://aws.amazon.com/blogs/infrastructure-and-automation/deploying-aws-lambda-functions-using-aws-cloudformation-the-portable-way/
          import boto3
          import json
          import logging
          import os
          import requests
          import time

          EMPTY_RESPONSE_DATA = {}
          FAILED = 'FAILED'
          SUCCESS = 'SUCCESS'

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info('Starting CopyZipsLambda')

              try:
                  s3_destination_bucket_name = event['ResourceProperties']['DestBucket']
                  s3_source_bucket_name = event['ResourceProperties']['SourceBucket']
                  object_keys = event['ResourceProperties']['ObjectKeys']

                  if event['RequestType'] != 'Delete':
                      copy_objects(s3_source_bucket_name, s3_destination_bucket_name, object_keys)
                      logger.info("Files copied successfully")
                  else:
                      delete_objects(s3_destination_bucket_name, object_keys)
                      logger.info("Files deleted successfully")

                  sendResponse(event, context, SUCCESS, EMPTY_RESPONSE_DATA)
                  logger.info('CopyZipsLambda finished')
              except:
                  logger.exception("There was a problem running CopyZipsLambda")
                  sendResponse(event, context, FAILED, EMPTY_RESPONSE_DATA)
                  return

          def copy_objects(s3_source_bucket_name, s3_destination_bucket_name, object_keys):
              s3 = boto3.resource('s3')
              destination_bucket = s3.Bucket(s3_destination_bucket_name)

              for object_key in object_keys:
                copy_object(s3_source_bucket_name, destination_bucket, object_key)

          def copy_object(s3_source_bucket_name, destination_bucket, object_key):
              logger.info('Copying object key: ' + object_key)
              copy_source = {
                  'Bucket': s3_source_bucket_name,
                  'Key': object_key
              }
              destination_bucket.copy(copy_source, object_key)

          def delete_objects(s3_destination_bucket_name, object_keys):
              s3 = boto3.client('s3')

              for object_key in object_keys:
                  delete_object(s3, s3_destination_bucket_name, object_key)

          def delete_object(s3, s3_destination_bucket_name, object_key):
              logger.info('Deleting object key: ' + object_key)
              s3.delete_object(Bucket=s3_destination_bucket_name, Key=object_key)

          def sendResponse(event, context, responseStatus, responseData):
              responseBody = {'Status': responseStatus,
                              'Reason': 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,
                              'PhysicalResourceId': context.log_stream_name,
                              'StackId': event['StackId'],
                              'RequestId': event['RequestId'],
                              'LogicalResourceId': event['LogicalResourceId'],
                              'Data': responseData}
              req = requests.put(event['ResponseURL'], data=json.dumps(responseBody))
              if req.status_code != 200:
                  raise Exception('Received a non-200 HTTP response while sending response to CloudFormation.')
              return
      Handler: index.lambda_handler
      Role: !GetAtt CopyZipsRole.Arn
      Runtime: python3.7
      Timeout: 600
  CopyZips:
    Type: Custom::CopyZips
    DependsOn:
      - S3Bucket
      - CopyZipsRole
    Properties:
      ServiceToken: !GetAtt CopyZipsLambda.Arn
      DestBucket: !Ref S3Bucket
      SourceBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      ObjectKeys:
        - !FindInMap [Package, Locations, PathToLayerCode]
        - !FindInMap [Package, Locations, PathToLambdaCode]
  CreateSnowflakeResourcesLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    DependsOn:
      - CopyZips
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${QSS3KeyPrefix}functions/packages/snowflake-connector-python-0.1.zip"
      Description: 'Layer to download Snowflake driver'
  CreateSnowflakeResourcesLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Sub "${QSS3KeyPrefix}functions/packages/create-resources-0.1.zip"
      Layers:
            - Ref: CreateSnowflakeResourcesLambdaLayer
      Handler: create-resources.lambda_handler
      Role: !GetAtt CreateSnowflakeResourcesExecutionRole.Arn
      Runtime: python3.7
      Timeout: 600
      Environment:
        Variables:
          ApiGatewayURL: !Sub "https://${SnowflakeApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${apiGatewayStageName}/sagemaker"
          ApiGatewayRoleARN: !GetAtt SnowflakeAPIGatewayExecutionRole.Arn
          ApiGatewayRoleName: !Ref SnowflakeAPIGatewayExecutionRole
          AutoMLRoleARN: !GetAtt SnowflakeAutoMLExecutionRole.Arn
          AutoMLRoleName: !Ref SnowflakeAutoMLExecutionRole
          Region: !Sub "${AWS::Region}"
          S3BucketName: !Ref S3BucketName
          SecretArn: !Ref snowflakeSecret
          KmsKeyArn: !Ref kmsKeyArn
          # Future consideration
          VpcSecurityGroupIds: "" # !Ref vpcSecurityGroupIds
          VpcSubnetIds: "" # !Ref vpcSubnetIds
          SnowflakeRole: !Ref snowflakeRole
          StackName: !Sub "${AWS::StackName}"
          DatabaseName: !Ref snowflakeDatabaseName
          SchemaName: !Ref snowflakeSchemaName
          SnowflakeResourceSuffix: !Ref snowflakeResourceSuffix
  SnowflakeResources:
    Type: Custom::SnowflakeResources
    DependsOn:
      - SnowflakeAPIGatewayExecutionRole
      - SnowflakeAutoMLExecutionRole
    Properties:
      ServiceToken: !Sub
        - "${lambdaArn}"
        - lambdaArn: !GetAtt CreateSnowflakeResourcesLambda.Arn
      PackageIdentifier: "'SagemakerProxy/0.1'"
